"""Telegram bot implementation for WB Ranker Bot."""

import asyncio
import logging
import os
from typing import Dict, Any, Optional, List

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application, CommandHandler, MessageHandler, CallbackQueryHandler,
    ContextTypes, filters
)

from app.config import Settings
from app.ports import Logger, ProgressTracker
from app.services import RankingServiceImpl
from app.wb_adapter import WBAPIAdapter
from app.fileio import FileLoaderImpl
from app.exporter import FileExporterImpl
from app.utils import (
    WBURLParser, format_price,
    get_product_info, extract_keywords_from_product, 
    filter_keywords_by_relevance, categorize_keywords
)


class TelegramProgressTracker(ProgressTracker):
    """Progress tracker implementation for Telegram bot."""
    
    def __init__(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        self.update = update
        self.context = context
        self.last_message_id: Optional[int] = None
    
    async def update_progress(
        self, 
        current: int, 
        total: int, 
        message: str = None, 
        eta: str = None
    ) -> None:
        """Update progress in Telegram."""
        progress_text = f"üîÑ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {current}/{total}"
        if message:
            progress_text += f"\nüìù {message}"
        if eta:
            progress_text += f"\n‚è±Ô∏è ETA: {eta}"
        
        # Create progress bar
        progress_bar = self._create_progress_bar(current, total)
        progress_text += f"\n{progress_bar}"
        
        try:
            if self.last_message_id:
                await self.context.bot.edit_message_text(
                    chat_id=self.update.effective_chat.id,
                    message_id=self.last_message_id,
                    text=progress_text
                )
            else:
                sent_message = await self.context.bot.send_message(
                    chat_id=self.update.effective_chat.id,
                    text=progress_text
                )
                self.last_message_id = sent_message.message_id
        except Exception as e:
            logging.warning(f"Failed to update progress: {e}")
    
    async def send_message(self, message: str) -> None:
        """Send a general message to the user."""
        try:
            await self.context.bot.send_message(
                chat_id=self.update.effective_chat.id,
                text=message
            )
        except Exception as e:
            logging.warning(f"Failed to send message: {e}")
    
    async def send_error(self, error_message: str) -> None:
        """Send an error message to the user."""
        try:
            await self.context.bot.send_message(
                chat_id=self.update.effective_chat.id,
                text=f"‚ùå {error_message}",
                parse_mode='HTML'
            )
        except Exception as e:
            logging.warning(f"Failed to send error message: {e}")
    
    async def send_success(self, success_message: str) -> None:
        """Send a success message to the user."""
        try:
            await self.context.bot.send_message(
                chat_id=self.update.effective_chat.id,
                text=f"‚úÖ {success_message}",
                parse_mode='HTML'
            )
        except Exception as e:
            logging.warning(f"Failed to send success message: {e}")
    
    def _create_progress_bar(self, current: int, total: int) -> str:
        """Create a visual progress bar."""
        if total == 0:
            return "‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë"
        
        progress = current / total
        filled = int(progress * 10)
        empty = 10 - filled
        
        return "‚ñà" * filled + "‚ñë" * empty + f" {progress:.1%}"
    
    async def complete(self, message: str = "") -> None:
        """Mark progress as complete."""
        try:
            completion_text = f"‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ!"
            if message:
                completion_text += f"\nüìù {message}"
            
            if self.last_message_id:
                await self.context.bot.edit_message_text(
                    chat_id=self.update.effective_chat.id,
                    message_id=self.last_message_id,
                    text=completion_text
                )
            else:
                await self.context.bot.send_message(
                    chat_id=self.update.effective_chat.id,
                    text=completion_text
                )
        except Exception as e:
            logging.warning(f"Failed to send completion message: {e}")
    
    async def error(self, message: str) -> None:
        """Mark progress as error."""
        try:
            error_text = f"‚ùå –û—à–∏–±–∫–∞: {message}"
            
            if self.last_message_id:
                await self.context.bot.edit_message_text(
                    chat_id=self.update.effective_chat.id,
                    message_id=self.last_message_id,
                    text=error_text
                )
            else:
                await self.context.bot.send_message(
                    chat_id=self.update.effective_chat.id,
                    text=error_text
                )
        except Exception as e:
            logging.warning(f"Failed to send error message: {e}")


class TelegramLogger(Logger):
    """Logger implementation that also logs to Telegram."""
    
    def __init__(self, bot_context: Optional[ContextTypes.DEFAULT_TYPE] = None, 
                 chat_id: Optional[int] = None):
        self.bot_context = bot_context
        self.chat_id = chat_id
        self.logger = logging.getLogger(__name__)
    
    def info(self, message: str, **kwargs) -> None:
        """Log info message."""
        self.logger.info(message)
        if self.bot_context and self.chat_id:
            try:
                # Check if we're in an async context
                loop = asyncio.get_running_loop()
                if loop and not loop.is_closed():
                    asyncio.create_task(self._send_to_telegram(f"‚ÑπÔ∏è {message}"))
            except RuntimeError:
                # No event loop running, skip Telegram logging
                pass
    
    def warning(self, message: str, **kwargs) -> None:
        """Log warning message."""
        self.logger.warning(message)
        if self.bot_context and self.chat_id:
            try:
                # Check if we're in an async context
                loop = asyncio.get_running_loop()
                if loop and not loop.is_closed():
                    asyncio.create_task(self._send_to_telegram(f"‚ö†Ô∏è {message}"))
            except RuntimeError:
                # No event loop running, skip Telegram logging
                pass
    
    def error(self, message: str, **kwargs) -> None:
        """Log error message."""
        self.logger.error(message)
        if self.bot_context and self.chat_id:
            try:
                # Check if we're in an async context
                loop = asyncio.get_running_loop()
                if loop and not loop.is_closed():
                    asyncio.create_task(self._send_to_telegram(f"‚ùå {message}"))
            except RuntimeError:
                # No event loop running, skip Telegram logging
                pass
    
    def debug(self, message: str, **kwargs) -> None:
        """Log debug message."""
        self.logger.debug(message)
    
    async def _send_to_telegram(self, message: str) -> None:
        """Send message to Telegram."""
        try:
            await self.bot_context.bot.send_message(
                chat_id=self.chat_id,
                text=message[:4000]  # Telegram message limit
            )
        except Exception as e:
            self.logger.warning(f"Failed to send log to Telegram: {e}")


class WBRankerBot:
    """Main Telegram bot class."""
    
    def __init__(self, settings: Settings):
        self.settings = settings
        self.logger = TelegramLogger()
        self.application = None
        self.ranking_service = None
        self.active_sessions: Dict[int, Dict[str, Any]] = {}
    
    async def initialize(self) -> None:
        """Initialize bot components."""
        try:
            # Initialize components
            self.file_loader = FileLoaderImpl(self.settings, self.logger)
            self.file_exporter = FileExporterImpl(self.settings, self.logger)
            
            # Initialize ranking service
            self.ranking_service = RankingServiceImpl(
                settings=self.settings,
                search_client=None,  # Will be set per request
                file_loader=self.file_loader,
                file_exporter=self.file_exporter,
                logger=self.logger
            )
            
            self.logger.info("Bot components initialized successfully")
            
        except Exception as e:
            self.logger.error(f"Failed to initialize bot: {e}")
            raise
    
    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """Handle /start command."""
        welcome_text = """
ü§ñ <b>WB Ranker Bot</b>

–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç –≤–∞–º –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø–æ–∑–∏—Ü–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤ –Ω–∞ Wildberries.

<b>–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:</b>
1. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Ç–æ–≤–∞—Ä WB
2. –ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª —Å –∫–ª—é—á–µ–≤—ã–º–∏ —Å–ª–æ–≤–∞–º–∏ (CSV/XLSX) –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Ñ–∞–π–ª
3. –ü–æ–ª—É—á–∏—Ç–µ –æ—Ç—á–µ—Ç —Å –ø–æ–∑–∏—Ü–∏—è–º–∏ —Ç–æ–≤–∞—Ä–∞

<b>–ö–æ–º–∞–Ω–¥—ã:</b>
/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É
/help - –ü–æ–º–æ—â—å
/status - –°—Ç–∞—Ç—É—Å –±–æ—Ç–∞
/cancel - –û—Ç–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â—É—é –æ–ø–µ—Ä–∞—Ü–∏—é

<b>–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã —Ñ–∞–π–ª–æ–≤:</b>
‚Ä¢ CSV (.csv)
‚Ä¢ Excel (.xlsx, .xls)
‚Ä¢ Google Drive —Å—Å—ã–ª–∫–∏

–ù–∞—á–Ω–∏—Ç–µ —Å –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—Å—ã–ª–∫–∏ –Ω–∞ —Ç–æ–≤–∞—Ä! üöÄ
        """
        
        keyboard = [
            [InlineKeyboardButton("üìñ –ü–æ–º–æ—â—å", callback_data="help")],
            [InlineKeyboardButton("üìä –°—Ç–∞—Ç—É—Å", callback_data="status")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            welcome_text,
            parse_mode='HTML',
            reply_markup=reply_markup
        )
    
    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """Handle /help command."""
        help_text = """
üìñ <b>–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é WB Ranker Bot</b>

<b>–ü–æ—à–∞–≥–æ–≤–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:</b>

1Ô∏è‚É£ <b>–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Ç–æ–≤–∞—Ä</b>
   –ü—Ä–∏–º–µ—Ä: https://wildberries.ru/catalog/12345/detail.aspx

2Ô∏è‚É£ <b>–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª —Å –∫–ª—é—á–µ–≤—ã–º–∏ —Å–ª–æ–≤–∞–º–∏</b>
   ‚Ä¢ CSV —Ñ–∞–π–ª —Å –∫–ª—é—á–µ–≤—ã–º–∏ —Å–ª–æ–≤–∞–º–∏ –≤ –ø–µ—Ä–≤–æ–π –∫–æ–ª–æ–Ω–∫–µ
   ‚Ä¢ Excel —Ñ–∞–π–ª (.xlsx, .xls)
   ‚Ä¢ –ò–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Ñ–∞–π–ª (Google Drive, Dropbox, –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫)

3Ô∏è‚É£ <b>–ü–æ–ª—É—á–∏—Ç–µ –æ—Ç—á–µ—Ç</b>
   ‚Ä¢ –ü–æ–∑–∏—Ü–∏–∏ —Ç–æ–≤–∞—Ä–∞ –ø–æ –∫–∞–∂–¥–æ–º—É –∫–ª—é—á–µ–≤–æ–º—É —Å–ª–æ–≤—É
   ‚Ä¢ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ –∞–Ω–∞–ª–∏–∑
   ‚Ä¢ –≠–∫—Å–ø–æ—Ä—Ç –≤ CSV/XLSX

<b>–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è:</b>
‚Ä¢ –ú–∞–∫—Å–∏–º—É–º 1000 –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –∑–∞ —Ä–∞–∑
‚Ä¢ –ú–∞–∫—Å–∏–º—É–º 5 —Å—Ç—Ä–∞–Ω–∏—Ü –ø–æ–∏—Å–∫–∞ –Ω–∞ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ
‚Ä¢ –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥–æ 30 –º–∏–Ω—É—Ç

<b>–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã —Å—Å—ã–ª–æ–∫ WB:</b>
‚Ä¢ https://wildberries.ru/catalog/ID/detail.aspx
‚Ä¢ https://www.wildberries.ru/catalog/ID/detail.aspx

<b>–ö–æ–º–∞–Ω–¥—ã:</b>
/start - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞
/status - –°—Ç–∞—Ç—É—Å –±–æ—Ç–∞
/cancel - –û—Ç–º–µ–Ω–∏—Ç—å –æ–ø–µ—Ä–∞—Ü–∏—é

–ù—É–∂–Ω–∞ –ø–æ–º–æ—â—å? –û—Ç–ø—Ä–∞–≤—å—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞! üöÄ
        """
        
        await update.message.reply_text(help_text, parse_mode='HTML')
    
    async def status_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """Handle /status command."""
        try:
            # Check WB API health
            async with WBAPIAdapter(self.settings, self.logger) as wb_adapter:
                api_healthy = await wb_adapter.health_check()
            
            status_text = f"""
üìä <b>–°—Ç–∞—Ç—É—Å WB Ranker Bot</b>

ü§ñ <b>–ë–æ—Ç:</b> –ê–∫—Ç–∏–≤–µ–Ω
üåê <b>WB API:</b> {'‚úÖ –î–æ—Å—Ç—É–ø–µ–Ω' if api_healthy else '‚ùå –ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω'}
üìÅ <b>–§–∞–π–ª–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞:</b> ‚úÖ –î–æ—Å—Ç—É–ø–Ω–∞
üíæ <b>–≠–∫—Å–ø–æ—Ä—Ç:</b> ‚úÖ –î–æ—Å—Ç—É–ø–µ–Ω

<b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏:</b>
‚Ä¢ –ú–∞–∫—Å–∏–º—É–º —Å—Ç—Ä–∞–Ω–∏—Ü: {self.settings.wb_max_pages}
‚Ä¢ –õ–∏–º–∏—Ç –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤: {self.settings.max_keywords_limit}
‚Ä¢ –¢–∞–π–º–∞—É—Ç –∑–∞–ø—Ä–æ—Å–æ–≤: {self.settings.wb_request_timeout}—Å
‚Ä¢ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –≤—ã–≤–æ–¥–∞: {self.settings.output_directory}

<b>–ê–∫—Ç–∏–≤–Ω—ã–µ —Å–µ—Å—Å–∏–∏:</b> {len(self.active_sessions)}
            """
            
            await update.message.reply_text(status_text, parse_mode='HTML')
            
        except Exception as e:
            await update.message.reply_text(
                f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞: {e}",
                parse_mode='HTML'
            )
    
    async def cancel_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """Handle /cancel command."""
        user_id = update.effective_user.id
        
        if user_id in self.active_sessions:
            del self.active_sessions[user_id]
            await update.message.reply_text(
                "‚úÖ –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞",
                parse_mode='HTML'
            )
        else:
            await update.message.reply_text(
                "‚ÑπÔ∏è –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π –¥–ª—è –æ—Ç–º–µ–Ω—ã",
                parse_mode='HTML'
            )
    
    async def handle_url_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """Handle WB product URL messages."""
        user_id = update.effective_user.id
        url = update.message.text.strip()
        
        self.logger.info(f"URL handler - User ID: {user_id}, URL: {url[:50]}...")
        
        try:
            # Validate URL
            parser = WBURLParser()
            if not parser.validate_wb_url(url):
                await update.message.reply_text(
                    f"‚ùå <b>–ù–µ–≤–µ—Ä–Ω–∞—è —Å—Å—ã–ª–∫–∞!</b>\n\n"
                    f"üîó <b>–í—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏:</b> {url[:50]}...\n\n"
                    f"üìù <b>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Ç–æ–≤–∞—Ä Wildberries:</b>\n"
                    f"‚Ä¢ https://www.wildberries.ru/catalog/123456/detail.aspx\n"
                    f"‚Ä¢ https://wildberries.ru/catalog/123456/detail.aspx\n\n"
                    f"‚ö†Ô∏è <b>–ù–µ –æ—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ:</b>\n"
                    f"‚Ä¢ –°—Å—ã–ª–∫–∏ –Ω–∞ Google Drive\n"
                    f"‚Ä¢ –°—Å—ã–ª–∫–∏ –Ω–∞ –¥—Ä—É–≥–∏–µ —Å–∞–π—Ç—ã\n"
                    f"‚Ä¢ –§–∞–π–ª—ã —Å –∫–ª—é—á–µ–≤—ã–º–∏ —Å–ª–æ–≤–∞–º–∏ (–∏—Ö –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ—Å–ª–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ —Ç–æ–≤–∞—Ä)",
                    parse_mode='HTML'
                )
                return
            
            # Extract product ID
            try:
                product_id = parser.extract_product_id(url)
            except ValueError as e:
                await update.message.reply_text(
                    f"‚ùå <b>–û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è ID —Ç–æ–≤–∞—Ä–∞!</b>\n\n"
                    f"üìù <b>–û—à–∏–±–∫–∞:</b> {str(e)}\n\n"
                    f"üîó <b>–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å —Å—Å—ã–ª–∫–∏ –Ω–∞ —Ç–æ–≤–∞—Ä Wildberries</b>",
                    parse_mode='HTML'
                )
                return
            
            # Store URL in user session
            if user_id not in self.active_sessions:
                self.active_sessions[user_id] = {}
            
            self.active_sessions[user_id]['product_url'] = url
            self.active_sessions[user_id]['product_id'] = product_id
            
            self.logger.info(f"Session created/updated for user {user_id}: {list(self.active_sessions[user_id].keys())}")
            
            await update.message.reply_text(
                f"‚úÖ –°—Å—ã–ª–∫–∞ –Ω–∞ —Ç–æ–≤–∞—Ä –ø—Ä–∏–Ω—è—Ç–∞!\n"
                f"üÜî ID —Ç–æ–≤–∞—Ä–∞: {product_id}\n\n"
                f"–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª —Å –∫–ª—é—á–µ–≤—ã–º–∏ —Å–ª–æ–≤–∞–º–∏ –∏–ª–∏ —Å—Å—ã–ª–∫—É –Ω–∞ —Ñ–∞–π–ª.",
                parse_mode='HTML'
            )
            
        except Exception as e:
            self.logger.error(f"Error handling URL: {e}")
            await update.message.reply_text(
                f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å—Å—ã–ª–∫–∏: {e}",
                parse_mode='HTML'
            )
    
    async def handle_document(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """Handle document uploads."""
        user_id = update.effective_user.id
        
        if user_id not in self.active_sessions:
            await update.message.reply_text(
                "‚ùå –°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Ç–æ–≤–∞—Ä WB",
                parse_mode='HTML'
            )
            return
        
        try:
            document = update.message.document
            file_name = document.file_name
            
            # Check file extension
            if not file_name.lower().endswith(('.csv', '.xlsx', '.xls')):
                await update.message.reply_text(
                    "‚ùå –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞.\n"
                    "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è: CSV, XLSX, XLS",
                    parse_mode='HTML'
                )
                return
            
            # Download file
            file = await context.bot.get_file(document.file_id)
            file_path = f"temp_{user_id}_{file_name}"
            
            await file.download_to_drive(file_path)
            
            # Store file path in session
            self.active_sessions[user_id]['keywords_file'] = file_path
            
            await update.message.reply_text(
                f"‚úÖ –§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω: {file_name}\n\n"
                f"–ù–∞—á–∏–Ω–∞–µ–º –∞–Ω–∞–ª–∏–∑...",
                parse_mode='HTML'
            )
            
            # Start ranking process with filtering
            await self._start_ranking_process_with_file(update, context, user_id)
            
        except Exception as e:
            self.logger.error(f"Error handling document: {e}")
            await update.message.reply_text(
                f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞: {e}",
                parse_mode='HTML'
            )
    
    async def handle_text_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """Handle text messages (URLs or other text)."""
        text = update.message.text.strip()
        
        # Debug: log message processing
        self.logger.info(f"Text message handler - Text: {text[:50]}...")
        
        # Check if it's a URL
        if text.startswith(('http://', 'https://')):
            # Check if it's a Google Drive or other file URL
            is_file_url = self._is_file_url(text)
            self.logger.info(f"URL detected - Is file URL: {is_file_url}")
            
            if is_file_url:
                await self.handle_file_url_message(update, context)
            else:
                await self.handle_url_message(update, context)
        else:
            await update.message.reply_text(
                "‚ùì –ù–µ –ø–æ–Ω–∏–º–∞—é –∫–æ–º–∞–Ω–¥—É.\n\n"
                "–û—Ç–ø—Ä–∞–≤—å—Ç–µ:\n"
                "‚Ä¢ –°—Å—ã–ª–∫—É –Ω–∞ —Ç–æ–≤–∞—Ä WB\n"
                "‚Ä¢ –§–∞–π–ª —Å –∫–ª—é—á–µ–≤—ã–º–∏ —Å–ª–æ–≤–∞–º–∏\n"
                "‚Ä¢ –°—Å—ã–ª–∫—É –Ω–∞ —Ñ–∞–π–ª (Google Drive)\n"
                "‚Ä¢ –ö–æ–º–∞–Ω–¥—É /help –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏",
                parse_mode='HTML'
            )
    
    def _is_file_url(self, url: str) -> bool:
        """Check if URL is a file URL (Google Drive, etc.)."""
        file_domains = [
            'drive.google.com',
            'docs.google.com',
            'dropbox.com',
            'yandex.ru/disk',
            'cloud.mail.ru'
        ]
        is_file = any(domain in url.lower() for domain in file_domains)
        self.logger.info(f"URL check: {url[:50]}... -> is_file: {is_file}")
        return is_file
    
    async def handle_file_url_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """Handle file URL messages (Google Drive, etc.)."""
        user_id = update.effective_user.id
        url = update.message.text.strip()
        
        try:
            # Debug: log session state
            self.logger.info(f"File URL handler - User ID: {user_id}, Active sessions: {list(self.active_sessions.keys())}")
            if user_id in self.active_sessions:
                self.logger.info(f"User session keys: {list(self.active_sessions[user_id].keys())}")
            
            # Check if user has a product URL in session
            if user_id not in self.active_sessions or 'product_url' not in self.active_sessions[user_id]:
                await update.message.reply_text(
                    "‚ùå –°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Ç–æ–≤–∞—Ä WB",
                    parse_mode='HTML'
                )
                return
            
            # Store file URL in session
            self.active_sessions[user_id]['file_url'] = url
            
            await update.message.reply_text(
                f"‚úÖ –°—Å—ã–ª–∫–∞ –Ω–∞ —Ñ–∞–π–ª –ø—Ä–∏–Ω—è—Ç–∞!\n"
                f"üîó URL: {url}\n\n"
                f"–ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –∏ –∞–Ω–∞–ª–∏–∑...",
                parse_mode='HTML'
            )
            
            # Start ranking process with file URL
            await self._start_ranking_process_with_url(update, context, user_id)
            
        except Exception as e:
            self.logger.error(f"Error handling file URL: {e}")
            await update.message.reply_text(
                f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ —Ñ–∞–π–ª: {e}",
                parse_mode='HTML'
            )
    
    async def callback_query_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """Handle callback queries from inline keyboards."""
        query = update.callback_query
        await query.answer()
        
        if query.data == "help":
            await self.help_command(update, context)
        elif query.data == "status":
            await self.status_command(update, context)
    
    async def _start_ranking_process(self, update: Update, context: ContextTypes.DEFAULT_TYPE, user_id: int) -> None:
        """Start the ranking process."""
        try:
            session = self.active_sessions[user_id]
            product_url = session['product_url']
            keywords_file = session['keywords_file']
            
            # Create progress tracker
            progress_tracker = TelegramProgressTracker(update, context)
            
            # Initialize search client
            async with WBAPIAdapter(self.settings, self.logger) as search_client:
                # Update ranking service with search client
                self.ranking_service.search_client = search_client
                self.ranking_service.progress_tracker = progress_tracker
                
                # Start ranking
                result = await self.ranking_service.rank_product_by_keywords(
                    product_url=product_url,
                    keywords_source=keywords_file,
                    output_format="xlsx"
                )
                
                # Send results
                await self._send_ranking_results(update, context, result)
                
        except Exception as e:
            self.logger.error(f"Error in ranking process: {e}")
            await update.message.reply_text(
                f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ: {e}",
                parse_mode='HTML'
            )
        finally:
            # Cleanup
            if user_id in self.active_sessions:
                session = self.active_sessions[user_id]
                if 'keywords_file' in session:
                    try:
                        os.remove(session['keywords_file'])
                    except OSError:
                        pass
                del self.active_sessions[user_id]
    
    async def _analyze_and_filter_keywords(self, update: Update, context: ContextTypes.DEFAULT_TYPE, 
                                         product_url: str, file_source: str) -> List[str]:
        """Analyze product and filter keywords from file."""
        try:
            # Extract product ID from URL
            parser = WBURLParser()
            try:
                product_id = parser.extract_product_id(product_url)
            except ValueError as e:
                await update.message.reply_text(
                    f"‚ùå <b>–ù–µ–≤–µ—Ä–Ω–∞—è —Å—Å—ã–ª–∫–∞!</b>\n\n"
                    f"üìù <b>–û—à–∏–±–∫–∞:</b> {str(e)}\n\n"
                    f"üîó <b>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Ç–æ–≤–∞—Ä Wildberries:</b>\n"
                    f"‚Ä¢ https://www.wildberries.ru/catalog/123456/detail.aspx\n"
                    f"‚Ä¢ https://wildberries.ru/catalog/123456/detail.aspx\n\n"
                    f"üìÅ <b>–ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª —Å –∫–ª—é—á–µ–≤—ã–º–∏ —Å–ª–æ–≤–∞–º–∏</b>",
                    parse_mode='HTML'
                )
                return []
            
            # Send analysis start message
            analysis_msg = await update.message.reply_text(
                "üîç <b>–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–æ–≤–∞—Ä –∏ —Ñ–∏–ª—å—Ç—Ä—É–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞...</b>\n\n"
                f"üì¶ ID —Ç–æ–≤–∞—Ä–∞: {product_id}\n"
                "‚è≥ –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–µ...",
                parse_mode='HTML'
            )
            
            # Get product information
            self.logger.info(f"Getting product info for ID: {product_id}")
            product_info = await get_product_info(product_id)
            
            # Check if we got real product info or fallback
            is_fallback = product_info.get('is_fallback', False) or (
                product_info.get('name', '').startswith('–¢–æ–≤–∞—Ä ') and 
                product_info.get('brand') == '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'
            )
            
            if is_fallback:
                self.logger.warning(f"Using fallback product info for ID: {product_id}")
                await analysis_msg.edit_text(
                    f"‚ö†Ô∏è <b>–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏—è—Ö</b>\n\n"
                    f"üì¶ ID —Ç–æ–≤–∞—Ä–∞: {product_id}\n"
                    f"üîÑ <b>–ò—Å–ø–æ–ª—å–∑—É–µ–º –≤—Å–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –±–µ–∑ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏</b>\n\n"
                    f"‚è≥ –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª —Å –∫–ª—é—á–µ–≤—ã–º–∏ —Å–ª–æ–≤–∞–º–∏...",
                    parse_mode='HTML'
                )
            else:
                self.logger.info(f"Product info retrieved: {product_info.get('name', 'N/A')}")
                
                await analysis_msg.edit_text(
                    f"‚úÖ <b>–¢–æ–≤–∞—Ä –Ω–∞–π–¥–µ–Ω!</b>\n\n"
                    f"üì¶ <b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {product_info.get('name', 'N/A')}\n"
                    f"üè∑Ô∏è <b>–ë—Ä–µ–Ω–¥:</b> {product_info.get('brand', 'N/A')}\n"
                    f"üìÇ <b>–ö–∞—Ç–µ–≥–æ—Ä–∏—è:</b> {product_info.get('subject', 'N/A')}\n\n"
                    f"‚è≥ –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª —Å –∫–ª—é—á–µ–≤—ã–º–∏ —Å–ª–æ–≤–∞–º–∏...",
                    parse_mode='HTML'
                )
            
            # Load keywords from file or URL
            if file_source.startswith(('http://', 'https://')):
                keywords = await self.file_loader.load_keywords_from_url(file_source)
            else:
                keywords = await self.file_loader.load_keywords_from_file(file_source)
            
            if not keywords:
                await analysis_msg.edit_text(
                    "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –∏–∑ —Ñ–∞–π–ª–∞",
                    parse_mode='HTML'
                )
                return []
            
            # Handle filtering based on whether we have real product info
            if is_fallback:
                # Use limited keywords without filtering to avoid long processing
                max_fallback_keywords = 1000  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
                relevant_keywords = keywords[:max_fallback_keywords]
                
                await analysis_msg.edit_text(
                    f"üìÅ <b>–§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω!</b>\n\n"
                    f"üìä <b>–í—Å–µ–≥–æ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤:</b> {len(keywords)}\n"
                    f"‚ö†Ô∏è <b>–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏—è—Ö</b>\n"
                    f"üîÑ <b>–ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–≤—ã–µ {max_fallback_keywords} –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤</b>\n"
                    f"‚è±Ô∏è <b>–≠—Ç–æ –∑–∞–π–º–µ—Ç –ø—Ä–∏–º–µ—Ä–Ω–æ {max_fallback_keywords * 0.5 / 60:.1f} –º–∏–Ω—É—Ç</b>\n\n"
                    f"üöÄ <b>–ù–∞—á–∏–Ω–∞–µ–º –ø–æ–∏—Å–∫...</b>",
                    parse_mode='HTML'
                )
            else:
                # Extract keywords from product and filter
                product_keywords = extract_keywords_from_product(product_info)
                
                await analysis_msg.edit_text(
                    f"üìÅ <b>–§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω!</b>\n\n"
                    f"üìä <b>–í—Å–µ–≥–æ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤:</b> {len(keywords)}\n"
                    f"üîë <b>–ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ —Ç–æ–≤–∞—Ä–∞:</b> {', '.join(product_keywords[:5])}...\n"
                    f"üîç <b>–§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏...</b>",
                    parse_mode='HTML'
                )
                
                # Filter keywords by relevance
                self.logger.info(f"Filtering {len(keywords)} keywords against product keywords: {product_keywords}")
                relevant_keywords = filter_keywords_by_relevance(keywords, product_keywords)
                self.logger.info(f"After filtering: {len(relevant_keywords)} relevant keywords")
                
                # Calculate efficiency
                efficiency = ((len(keywords) - len(relevant_keywords)) / len(keywords) * 100) if keywords else 0
                
                await analysis_msg.edit_text(
                    f"üéØ <b>–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!</b>\n\n"
                    f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n"
                    f"   ‚Ä¢ –ò—Å—Ö–æ–¥–Ω–æ: {len(keywords)} –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤\n"
                    f"   ‚Ä¢ –ü–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏: {len(relevant_keywords)} –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤\n"
                    f"   ‚Ä¢ –°–æ–∫—Ä–∞—â–µ–Ω–∏–µ: {efficiency:.1f}%\n\n"
                    f"üöÄ <b>–ù–∞—á–∏–Ω–∞–µ–º –ø–æ–∏—Å–∫ –ø–æ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–º –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º...</b>",
                    parse_mode='HTML'
                )
            
            return relevant_keywords
            
        except Exception as e:
            self.logger.error(f"Error in keyword analysis and filtering: {e}")
            await update.message.reply_text(
                f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏: {e}",
                parse_mode='HTML'
            )
            return []
    
    async def _start_ranking_process_with_file(self, update: Update, context: ContextTypes.DEFAULT_TYPE, user_id: int) -> None:
        """Start the ranking process with file filtering."""
        try:
            session = self.active_sessions[user_id]
            product_url = session['product_url']
            keywords_file = session['keywords_file']
            
            # Analyze product and filter keywords
            relevant_keywords = await self._analyze_and_filter_keywords(update, context, product_url, keywords_file)
            
            if not relevant_keywords:
                await update.message.reply_text(
                    "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞",
                    parse_mode='HTML'
                )
                return
            
            # Create progress tracker
            progress_tracker = TelegramProgressTracker(update, context)
            
            # Initialize search client
            async with WBAPIAdapter(self.settings, self.logger) as search_client:
                # Update ranking service with search client
                self.ranking_service.search_client = search_client
                self.ranking_service.progress_tracker = progress_tracker
                
                # Start ranking with filtered keywords
                result = await self.ranking_service.rank_product_by_keywords(
                    product_url=product_url,
                    keywords_source=relevant_keywords,  # Use filtered keywords instead of file path
                    output_format="xlsx"
                )
                
                # Send results
                await self._send_ranking_results(update, context, result)
                
        except Exception as e:
            self.logger.error(f"Error in ranking process with file: {e}")
            await update.message.reply_text(
                f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ: {e}",
                parse_mode='HTML'
            )
        finally:
            # Cleanup
            if user_id in self.active_sessions:
                del self.active_sessions[user_id]

    async def _start_ranking_process_with_url(self, update: Update, context: ContextTypes.DEFAULT_TYPE, user_id: int) -> None:
        """Start the ranking process with file URL."""
        try:
            session = self.active_sessions[user_id]
            product_url = session['product_url']
            file_url = session['file_url']
            
            # Analyze product and filter keywords
            relevant_keywords = await self._analyze_and_filter_keywords(update, context, product_url, file_url)
            
            if not relevant_keywords:
                await update.message.reply_text(
                    "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞",
                    parse_mode='HTML'
                )
                return
            
            # Create progress tracker
            progress_tracker = TelegramProgressTracker(update, context)
            
            # Initialize search client
            async with WBAPIAdapter(self.settings, self.logger) as search_client:
                # Update ranking service with search client
                self.ranking_service.search_client = search_client
                self.ranking_service.progress_tracker = progress_tracker
                
                # Start ranking with filtered keywords
                result = await self.ranking_service.rank_product_by_keywords(
                    product_url=product_url,
                    keywords_source=relevant_keywords,  # Use filtered keywords instead of file URL
                    output_format="xlsx"
                )
                
                # Send results
                await self._send_ranking_results(update, context, result)
                
        except Exception as e:
            self.logger.error(f"Error in ranking process with URL: {e}")
            await update.message.reply_text(
                f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ: {e}",
                parse_mode='HTML'
            )
        finally:
            # Cleanup
            if user_id in self.active_sessions:
                del self.active_sessions[user_id]
    
    async def _send_ranking_results(self, update: Update, context: ContextTypes.DEFAULT_TYPE, result) -> None:
        """Send ranking results to user."""
        try:
            # Create summary message
            summary_text = f"""
üìä <b>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞</b>

üÜî <b>ID —Ç–æ–≤–∞—Ä–∞:</b> {result.product_id}
üì¶ <b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {result.product_name}
üîç <b>–í—Å–µ–≥–æ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤:</b> {result.total_keywords}
‚úÖ <b>–ù–∞–π–¥–µ–Ω–æ:</b> {result.found_keywords}
    üìà <b>–ü—Ä–æ—Ü–µ–Ω—Ç –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö:</b> {(result.found_keywords / result.total_keywords * 100):.1f}% if result.total_keywords > 0 else "0%"
‚è±Ô∏è <b>–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:</b> {result.execution_time_seconds:.1f}—Å

<b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>
‚Ä¢ –°—Ä–µ–¥–Ω—è—è –ø–æ–∑–∏—Ü–∏—è: {self.ranking_service.get_statistics().get('average_position', 0):.1f}
‚Ä¢ –õ—É—á—à–∞—è –ø–æ–∑–∏—Ü–∏—è: {self.ranking_service.get_statistics().get('best_position', 'N/A')}
‚Ä¢ –•—É–¥—à–∞—è –ø–æ–∑–∏—Ü–∏—è: {self.ranking_service.get_statistics().get('worst_position', 'N/A')}
            """
            
            await update.message.reply_text(summary_text, parse_mode='HTML')
            
            # Send file if available
            if result.export_file_path and os.path.exists(result.export_file_path):
                try:
                    # Determine file type and caption
                    file_extension = os.path.splitext(result.export_file_path)[1].lower()
                    if file_extension == '.csv':
                        caption = "üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ CSV"
                    else:
                        caption = "üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ Excel"
                    
                    # Send the file
                    with open(result.export_file_path, 'rb') as file:
                        await update.message.reply_document(
                            document=file,
                            filename=os.path.basename(result.export_file_path),
                            caption=caption,
                            parse_mode='HTML'
                        )
                    
                    self.logger.info(f"Sent results file to user: {result.export_file_path}")
                    
                except Exception as e:
                    self.logger.error(f"Error sending file: {e}")
                    await update.message.reply_text(
                        f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞: {e}\n"
                        f"–§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω –ø–æ –ø—É—Ç–∏: {result.export_file_path}",
                        parse_mode='HTML'
                    )
            else:
                await update.message.reply_text(
                    "üìÅ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –ª–æ–∫–∞–ª—å–Ω–æ.\n"
                    "–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏.",
                    parse_mode='HTML'
                )
            
        except Exception as e:
            self.logger.error(f"Error sending results: {e}")
            await update.message.reply_text(
                f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {e}",
                parse_mode='HTML'
            )
    
    def setup_handlers(self) -> None:
        """Setup bot handlers."""
        # Command handlers
        self.application.add_handler(CommandHandler("start", self.start_command))
        self.application.add_handler(CommandHandler("help", self.help_command))
        self.application.add_handler(CommandHandler("status", self.status_command))
        self.application.add_handler(CommandHandler("cancel", self.cancel_command))
        
        # Message handlers
        self.application.add_handler(MessageHandler(filters.Document.ALL, self.handle_document))
        self.application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_text_message))
        
        # Callback query handler
        self.application.add_handler(CallbackQueryHandler(self.callback_query_handler))
    
    def run(self) -> None:
        """Run the bot (synchronously)."""
        try:
            # Initialize bot (no awaits needed here)
            asyncio.run(self.initialize())

            # Create application
            self.application = Application.builder().token(self.settings.bot_token).build()

            # Setup handlers
            self.setup_handlers()

            # Start bot (blocking call manages its own event loop)
            self.logger.info("Starting WB Ranker Bot...")
            self.application.run_polling(
                drop_pending_updates=True,  # Drop pending updates to avoid conflicts
                allowed_updates=["message", "callback_query"]  # Only handle these types
            )

        except Exception as e:
            self.logger.error(f"Failed to run bot: {e}")
            raise


def main():
    """Main function to run the bot."""
    # Load settings
    settings = Settings()

    # Create and run bot
    bot = WBRankerBot(settings)
    bot.run()


if __name__ == "__main__":
    # Configure logging
    logging.basicConfig(
        level=logging.INFO,
        format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
    )
    
    # Run bot
    main()
