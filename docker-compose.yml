version: '3.8'

services:
  wb-ranker-bot:
    build: .
    container_name: wb-ranker-bot
    restart: unless-stopped
    environment:
      # Bot configuration
      - BOT_TOKEN=${BOT_TOKEN}
      
      # WB API configuration
      - WB_API_BASE_URL=${WB_API_BASE_URL:-https://search.wb.ru/exactmatch/ru/common/v5/search}
      - WB_MAX_PAGES=${WB_MAX_PAGES:-5}
      - WB_CONCURRENCY_LIMIT=${WB_CONCURRENCY_LIMIT:-15}
      - WB_REQUEST_TIMEOUT=${WB_REQUEST_TIMEOUT:-10}
      - WB_RETRY_ATTEMPTS=${WB_RETRY_ATTEMPTS:-3}
      - WB_BACKOFF_FACTOR=${WB_BACKOFF_FACTOR:-2.0}
      - WB_DELAY_BETWEEN_REQUESTS=${WB_DELAY_BETWEEN_REQUESTS:-0.5,1.5}
      
      # File processing configuration
      - MAX_KEYWORDS_LIMIT=${MAX_KEYWORDS_LIMIT:-100000}
      - MAX_EXECUTION_TIME_MINUTES=${MAX_EXECUTION_TIME_MINUTES:-30}
      
      # Logging configuration
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - LOG_FORMAT=${LOG_FORMAT:-json}
      
      # Output configuration
      - OUTPUT_DIRECTORY=${OUTPUT_DIRECTORY:-/app/output}
    
    volumes:
      # Mount output directory for persistent file storage
      - ./output:/app/output
      # Mount logs directory for log persistence
      - ./logs:/app/logs
      # Mount environment file if exists
      - ./.env:/app/.env:ro
    
    networks:
      - wb-ranker-network
    
    # Resource limits
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'
    
    # Health check
    healthcheck:
      test: ["CMD", "python", "-c", "import sys; sys.exit(0)"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Optional: Redis for caching and session management
  redis:
    image: redis:7-alpine
    container_name: wb-ranker-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --maxmemory 128mb --maxmemory-policy allkeys-lru
    volumes:
      - redis-data:/data
    networks:
      - wb-ranker-network
    deploy:
      resources:
        limits:
          memory: 128M
          cpus: '0.1'
        reservations:
          memory: 64M
          cpus: '0.05'

  # Optional: Monitoring with Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: wb-ranker-prometheus
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    networks:
      - wb-ranker-network
    ports:
      - "9090:9090"
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.2'
        reservations:
          memory: 128M
          cpus: '0.1'

  # Optional: Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    container_name: wb-ranker-grafana
    restart: unless-stopped
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    networks:
      - wb-ranker-network
    ports:
      - "3000:3000"
    depends_on:
      - prometheus
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.2'
        reservations:
          memory: 128M
          cpus: '0.1'

volumes:
  redis-data:
    driver: local
  prometheus-data:
    driver: local
  grafana-data:
    driver: local

networks:
  wb-ranker-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
